schema {
  query: Root
}

# An album in the catalog
type Album implements Node {
  # The ID of an object
  id: ID!

  # The id of the album.
  album_id: String

  # Type of album.
  album_type: String

  # Artists featured on the album.
  artists: [Artist]

  # Available markets.
  available_markets: [String]

  # URLs for the album.
  external_urls: URLMap

  # The Spotify web URL for the album.
  href: String

  # Artists featured on the album.
  images: [Image]

  # The name of the album.
  name: String

  # Type of album.
  type: String

  # The Spotify URI for the album.
  uri: String
}

# An artist in the catalog
type Artist implements Node {
  # The ID of an object
  id: ID!

  # The id of the artist.
  artist_id: Int

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object.
  type: String

  # The Spotiy URI for the artist.
  uri: String

  # External URLs for the artist.
  external_urls: [URLMap]
}

# A list of results.
type Collection {
  # Currently, a list of albums.
  results: [Album]
}

# An image.
type Image {
  # The height of the image.
  height: Int

  # The width of the image.
  width: Int

  # The url of the image.
  url: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Root {
  albums: Collection
  artist(id: Int): Artist
  track(id: Int): Track

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Track implements Node {
  # The ID of an object
  id: ID!

  # The id of the track.
  trackId: Int

  # The play index of the track.
  number: Int

  # The name of the track.
  name: String

  # The formatted length of the track.
  length: String

  # The relative path to the source audio for the track.
  src: String
}

# A  map of external URL.
type URLMap {
  # The spotify URL for the object.
  spotify: String
}
