schema {
  query: Root
}

# An album in the catalog
type Album implements Node {
  # The ID of an object
  id: ID!

  # The id of the album.
  album_id: String

  # Type of album.
  album_type: String

  # Artists featured on the album.
  artists: [Artist]

  # Available markets.
  available_markets: [String]

  # A list of copyrights.
  copyrights: [Copyright]

  # URLs for the album.
  external_ids: IDMap

  # URLs for the album.
  external_urls: URLMap

  # Genres for the album.
  genres: [String]

  # The Spotify web URL for the album.
  href: String

  # Artists featured on the album.
  images: [Image]

  # The name of the album.
  name: String

  # The label of the album.
  label: String

  # The popularity of the album.
  popularity: Int

  # The release date for the album.
  release_date: String

  # The release date for the album.
  release_date_precision: String

  # Album tracks.
  tracks: TrackCollection

  # Type of album.
  type: String

  # The Spotify URI for the album.
  uri: String
}

# An artist in the catalog
type Artist implements Node {
  # The ID of an object
  id: ID!

  # The id of the artist.
  artist_id: Int

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object.
  type: String

  # The Spotiy URI for the artist.
  uri: String

  # External URLs for the artist.
  external_urls: [URLMap]
}

# An album in the catalog
type BrowseAlbum {
  # The id of the album.
  id: String

  # The id of the album.
  album_id: String

  # Type of album.
  album_type: String

  # Artists featured on the album.
  artists: [Artist]

  # Available markets.
  available_markets: [String]

  # URLs for the album.
  external_urls: URLMap

  # The Spotify web URL for the album.
  href: String

  # Artists featured on the album.
  images: [Image]

  # The name of the album.
  name: String

  # Type of album.
  type: String

  # The Spotify URI for the album.
  uri: String
}

# A list of results.
type Collection {
  # Currently, a list of albums.
  results: [BrowseAlbum]
}

# A  list of copyrights.
type Copyright {
  # The text for the copyright.
  text: String

  # The type of copyright.
  type: String
}

# A  map of external IDs.
type IDMap {
  # The UPC ID for the object.
  upc: String
}

# An image.
type Image {
  # The height of the image.
  height: Int

  # The width of the image.
  width: Int

  # The url of the image.
  url: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Root {
  albums: Collection
  album(id: String): Album
  artist(id: String): Artist
  track(id: String): Track

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Track implements Node {
  # The ID of an object
  id: ID!

  # Artists featured on the track.
  artists: [Artist]

  # Available markets.
  available_markets: [String]

  # Disc number.
  disc_number: Int

  # Duration in milliseconds.
  duration_ms: Int

  # Explicit flag.
  explicit: Boolean

  # URLs for the track.
  external_urls: URLMap

  # The Spotify web URL for the track.
  href: String

  # The name of the track.
  name: String

  # The Spotify web URL for the track.
  preview_url: String

  # The Spotify web URL for the track.
  track_number: Int

  # The type of object.
  type: String

  # The Spotiy URI for the track.
  uri: String

  # The id of the track.
  track_id: String
}

type TrackCollection {
  # List of tracks.
  items: [Track]
}

# A  map of external URL.
type URLMap {
  # The spotify URL for the object.
  spotify: String
}
