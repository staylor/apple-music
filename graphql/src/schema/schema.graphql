schema {
  query: Root
}

# An album in the catalog
type Album implements Node {
  # The ID of an object
  id: ID!

  # The id of the album.
  albumId: String

  # The name of the album.
  name: String

  # The name of the artist who created the album.
  artist(after: String, first: Int, before: String, last: Int): ArtistConnection

  # The genre of the album.
  genre: String

  # The year the album was released.
  year: Int

  # The formatted length of the album.
  length: String

  # The relative path of the cover image source.
  image: String

  # Discs containing tracks. Most albums contain only one disc.
  discs: [Disc]
}

# A connection to a list of items.
type AlbumConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AlbumEdge]
}

# An edge in a connection.
type AlbumEdge {
  # The item at the end of the edge
  node: Album

  # A cursor for use in pagination
  cursor: String!
}

# An artist in the catalog
type Artist implements Node {
  # The ID of an object
  id: ID!

  # The id of the artist.
  artistId: String

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object.
  type: String

  # The Spotify URI for the artist.
  uri: String

  # External URLs for the artist.
  external_urls: [URLMap]
}

# A connection to a list of items.
type ArtistConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArtistEdge]
}

# An edge in a connection.
type ArtistEdge {
  # The item at the end of the edge
  node: Artist

  # A cursor for use in pagination
  cursor: String!
}

# An album in the catalog
type BrowseAlbum implements Node {
  # The ID of an object
  id: ID!

  # The id of the album.
  albumId: String

  # Type of album.
  album_type: String

  # Artists featured on the album.
  artists: [Artist]

  # Available markets.
  available_markets: [String]

  # URLs for the album.
  external_urls: URLMap

  # The Spotify web URL for the album.
  href: String

  # Album image.
  image: Image

  # The name of the album.
  name: String

  # Type of album.
  type: String

  # The Spotify URI for the album.
  uri: String
}

# A list of results.
type Collection {
  # Currently, a list of albums.
  results: [BrowseAlbum]
}

type Disc {
  number: Int

  # A list of tracks.
  tracks(after: String, first: Int, before: String, last: Int): TrackConnection
}

# An image.
type Image {
  # The height of the image.
  height: Int

  # The width of the image.
  width: Int

  # The url of the image.
  url: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Root {
  newReleases: Collection
  album(id: String): Album
  artist(id: String): Artist
  track(id: String): Track

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Track implements Node {
  # The ID of an object
  id: ID!

  # The id of the track.
  trackId: String

  # The play index of the track.
  number: Int

  # The name of the track.
  name: String

  # The formatted length of the track.
  length: String

  # The relative path to the source audio for the track.
  src: String

  # The album containing the track
  album(after: String, first: Int, before: String, last: Int): AlbumConnection
}

# A connection to a list of items.
type TrackConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TrackEdge]
}

# An edge in a connection.
type TrackEdge {
  # The item at the end of the edge
  node: Track

  # A cursor for use in pagination
  cursor: String!
}

# A  map of external URL.
type URLMap {
  # The spotify URL for the object.
  spotify: String
}
