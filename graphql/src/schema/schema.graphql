schema {
  query: Root
}

# An album in the catalog
type Album implements AlbumInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the album.
  album_id: String

  # The Spotify web URL for the album.
  href: String

  # List of external URLs.
  external_urls: URLMap

  # The name of the album.
  name: String

  # The Spotify URI for the album.
  uri: String

  # Type of album.
  type: String

  # The genres for the artist.
  images: [Image]

  # The name of the artists who created the album.
  artists: [AlbumArtist]

  # List of 2-digit country codes where the album is available.
  available_markets: [String]

  # List of copyrights.
  copyrights: [Copyright]

  # List of external IDs.
  external_ids: IDMap

  # The genres for the album.
  genres: [String]

  # The popularity ranking of the album.
  popularity: Int

  # The date the album was released.
  release_date: String

  # The precision of the release date.
  release_date_precision: String

  # The album track info.
  tracks: Trackset
}

# An artist on the album.
type AlbumArtist implements ArtistInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the artist.
  artist_id: String

  # URLs for the artist.
  external_urls: URLMap

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object (usually: "artist").
  type: String

  # The Spotify URI for the artist.
  uri: String
}

interface AlbumInterface {
  # The Spotify ID of the album.
  album_id: String

  # The Spotify web URL for the album.
  href: String

  # List of external URLs.
  external_urls: URLMap

  # The name of the album.
  name: String

  # The Spotify URI for the album.
  uri: String

  # Type of album.
  type: String

  # The genres for the artist.
  images: [Image]

  # The name of the artists who created the album.
  artists: [AlbumArtist]

  # List of 2-digit country codes where the album is available.
  available_markets: [String]
}

type AlbumTrack implements TrackInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the track.
  track_id: String

  # The artists on the track.
  artists: [AlbumArtist]

  # Available markets.
  available_markets: [String]

  # The disc index of the track.
  disc_number: Int

  # The track length is milliseconds.
  duration_ms: Int

  # Whether the track has explicit lyrics.
  explicit: Boolean

  # A list of URLs for the track.
  external_urls: URLMap

  # The Spotify URL of the track.
  href: String

  # The name of the track.
  name: String

  # The formatted length of the track.
  preview_url: String

  # The index of the track.
  track_number: Int

  # The type of track (usually: "track").
  type: String

  # The Spotify URI of the track.
  uri: String
}

# An artist in the catalog
type Artist implements ArtistInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the artist.
  artist_id: String

  # URLs for the artist.
  external_urls: URLMap

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object (usually: "artist").
  type: String

  # The Spotify URI for the artist.
  uri: String

  # Follower info for the artist.
  followers: Followers

  # The genres for the artist.
  genres: [String]

  # The genres for the artist.
  images: [Image]

  # The popularity ranking of the artist.
  popularity: Int
}

# A list of results.
type ArtistCollection {
  # Currently, a list of artists.
  results(artistType: String): [Artist]
}

interface ArtistInterface {
  # The Spotify ID of the artist.
  artist_id: String

  # URLs for the artist.
  external_urls: URLMap

  # The Spotify web URL for the artist.
  href: String

  # The name of the artist.
  name: String

  # The type of object (usually: "artist").
  type: String

  # The Spotify URI for the artist.
  uri: String
}

# An album in the catalog
type BrowseAlbum implements AlbumInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the album.
  album_id: String

  # The Spotify web URL for the album.
  href: String

  # List of external URLs.
  external_urls: URLMap

  # The name of the album.
  name: String

  # The Spotify URI for the album.
  uri: String

  # Type of album.
  type: String

  # The genres for the artist.
  images: [Image]

  # The name of the artists who created the album.
  artists: [AlbumArtist]

  # List of 2-digit country codes where the album is available.
  available_markets: [String]

  # The type of the album (usually: "album")
  album_type: String
}

# A connection to a list of items.
type BrowseAlbumConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BrowseAlbumEdge]
}

# An edge in a connection.
type BrowseAlbumEdge {
  # The item at the end of the edge
  node: BrowseAlbum

  # A cursor for use in pagination
  cursor: String!
}

# A list of results.
type Collection implements Node {
  # The ID of an object
  id: ID!

  # Currently, a list of albums.
  results(type: String, after: String, first: Int, before: String, last: Int): BrowseAlbumConnection
}

# A list of copyrights.
type Copyright {
  # Copyright text.
  text: String

  # The type of copyright.
  type: String
}

# Follower info for the object.
type Followers {
  # The follower URL for the object.
  href: String

  # The follower count for the object.
  total: Int
}

# A  map of external IDs.
type IDMap {
  # The UPC ID for the object.
  upc: String
}

# An image.
type Image {
  # The height of the image.
  height: Int

  # The width of the image.
  width: Int

  # The url of the image.
  url: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Root {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  newReleases: Collection
  album(id: String): Album
  artist(id: String): Artist
  track(id: String): Track
  artistAlbums(id: String): Collection
  topTracks(id: String): TrackCollection
  relatedArtists(id: String): ArtistCollection
}

type Track implements TrackInterface, Node {
  # The ID of an object
  id: ID!

  # The Spotify ID of the track.
  track_id: String

  # The artists on the track.
  artists: [AlbumArtist]

  # Available markets.
  available_markets: [String]

  # The disc index of the track.
  disc_number: Int

  # The track length is milliseconds.
  duration_ms: Int

  # Whether the track has explicit lyrics.
  explicit: Boolean

  # A list of URLs for the track.
  external_urls: URLMap

  # The Spotify URL of the track.
  href: String

  # The name of the track.
  name: String

  # The formatted length of the track.
  preview_url: String

  # The index of the track.
  track_number: Int

  # The type of track (usually: "track").
  type: String

  # The Spotify URI of the track.
  uri: String

  # The album related to the track.
  album: BrowseAlbum
}

# A list of results.
type TrackCollection {
  # Currently, a list of tracks.
  results(trackType: String): [Track]
}

interface TrackInterface {
  # The Spotify ID of the track.
  track_id: String

  # The artists on the track.
  artists: [AlbumArtist]

  # Available markets.
  available_markets: [String]

  # The disc index of the track.
  disc_number: Int

  # The track length is milliseconds.
  duration_ms: Int

  # Whether the track has explicit lyrics.
  explicit: Boolean

  # A list of URLs for the track.
  external_urls: URLMap

  # The Spotify URL of the track.
  href: String

  # The name of the track.
  name: String

  # The formatted length of the track.
  preview_url: String

  # The index of the track.
  track_number: Int

  # The type of track (usually: "track").
  type: String

  # The Spotify URI of the track.
  uri: String
}

# A set of track data.
type Trackset {
  # URL for track info.
  href: String

  # A list of track objects.
  items: [AlbumTrack]

  # Maximum number of results per request.
  limit: Int

  # Optional: the next set of results.
  next: String

  # The offset of the results.
  offset: Int

  # Optional: the previous set of results.
  previous: String

  # The total number of results.
  total: Int
}

# A  map of external URLs.
type URLMap {
  # The Spotify URL for the object.
  spotify: String
}
